Варианты обращения к внешним системам(если, например, не установлен PostgreSQL)

1. Проверка только интеграфионным тестированием - написали для внешней системы код, мы его 
не тестируем, тестируем только тогда, когда наша система будет собрана и 
установлена на некий стенд, который позволяет подключиться к доп системам

2. Использование заглушек - чтобы проверить логику, 
подменить блок, который ходит к внешней система, на фейковый (FakeCityRegisterChecker)

3. Embedded systems - заменяющие компоненты, которые запускаются без установки

4. Разделяемый ресурс(система) - Поставить систему, которая нужна, в виде разделяемого ресурса между разработчиками(виртуальная машина)

5. Docker - спец ПО, которое запускается на вашем комп и работает с понятием "образ" системы,
использование легковесных контейнеров. Можно запустить несколько контейнеров, как по отдельности, так и вместе
несколько маленьких вирт машин с установленным программным обеспечением, 
можно хранить "образы" во внешнем репозитории

Логирование
Логирование (logging) - это процесс записи информации о событиях, происходящих в рамках какого-либо 
процесса с некоторым объектом. Запись может проводиться в файл регистрации или в базу данных. 
Слово log, на самом деле, имеет множество значений, например протокол или журнал.
Если в работе сервера, компьютера или программного обеспечения возникла неизвестная ошибка, 
в первую очередь смотрят логи. Лог — текстовый файл с информацией о действиях программного 
обеспечения или пользователей, который хранится на компьютере или сервере.
 Это хронология событий и их источников, ошибок и причин, по которым они произошли. 
Читать и анализировать логи можно с помощью специального ПО
Из известных решений по логированию в Java можно выделить:
log4j
JUL — java.util.logging
JCL — jakarta commons logging
Logback
SLF4J — simple logging facade for java - для переключения между логерами
https://javarush.ru/groups/posts/2388-logirovanie-chto-kak-gde-i-chem 

Но есть и то, что логировать обязательно:
Начало/конец работы приложения. Нужно знать, что приложение действительно запустилось,
 как мы и ожидали, и завершилось так же ожидаемо.
Вопросы безопасности. Здесь хорошо бы логировать попытки подбора пароля, 
логирование входа важных юзеров и т.д.
Некоторые состояния приложения. Например, переход из одного состояния в другое в бизнес процессе.
Некоторая информация для дебага, с соответственным уровнем логирования.
Некоторые SQL скрипты. Есть реальные случаи, когда это нужно. Опять-таки, умелым образом
 регулируя уровни, можно добиться отличных результатов.
Выполняемые нити(Thread) могут быть логированы в случаях с проверкой корректной работы.

Популярные ошибки в логировании
Нюансов много, но можно выделить несколько частых ошибок:
Избыток логирования. Не стоит логировать каждый шаг, который чисто теоретически может быть важным. 
Есть правило: логи могут нагружать работоспособность не более, чем на 10%. Иначе будут проблемы
 с производительностью.
Логирование всех данных в один файл. Это приведет к тому, что в определенный момент чтение/запись 
в него будет очень сложной, не говоря о том, что есть ограничения по размеру файлов в определенных системах.
Использование неверных уровней логирования. У каждого уровня логирования есть четкие границы, и их стоит соблюдать. Если граница расплывчатая, можно договориться какой из уровней использовать.

1 уровень - trace - самый подробный, каждый шаг прописывается
2 уровень - debag - прописывается не только сообщение, но и параметры для проверки 
3 уровень - info - часто встречатеся, важные сообщения, важные этапы, не только ошибки
4 уровень - warn - почти ошибка, не прерывает задачу, но нужно обратить внимание
5 уровень - error - когда ошибка, все плохо
